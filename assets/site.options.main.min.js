"use strict"; window.Site = window.Site || {}, window.Site.Options = window.Site.Options || {}, window.Site.Options.Main = function ($, undefined) { var self = {}, _$dialogEditEl = undefined, _currentViewID = undefined, _currentOptionSvgElColor = undefined, _currentOptionID = undefined, _$divDialogOptionsAvailablePlans = undefined; function _getPlanThumbElementForTooltip($xmlNodeOption, $xmlNodePlan, isMulti) { dbg("_getPlanThumbElementForTooltip($xmlNodeOption, $xmlNodePlan, isMulti) "), $xmlNodeOption && dbg($xmlNodeOption.attr("id")), $xmlNodePlan && dbg("," + $xmlNodePlan.attr("id")); var $divWrapper = $("<div />").addClass("ui-sitetip-thumb"); if ($xmlNodePlan.length) { var selectedOrientation, $linkPlan, strName = $xmlNodePlan.attr("displayname"), strLinkTitle = "Create your own custom " + strName + "!", strUrl = $xmlNodePlan.attr("url"), strImgPath = $xmlNodePlan.attr("previewfile"); if ($xmlNodeOption && !isMulti) { var selectedExterior = $xmlNodeOption.attr("selectedexterioroptionid"); if (selectedExterior) strImgPath = Site.Data.Main.$dataAvailableExteriors.find("exterior[optionid=" + selectedExterior + "]").attr("fullsizeimage"); else strImgPath = $xmlNodePlan.attr("previewfile"); selectedOrientation = $xmlNodeOption.attr("selectedorientation"); var savedPlanId = $xmlNodeOption.attr("savedplanid"); if (savedPlanId > 0) { var $savedPlanNode = Site.Data.Main.$dataAvailablePlans.find("plan savedplan[id=" + savedPlanId + "]"); strUrl = $savedPlanNode.attr("urlbase") + $savedPlanNode.attr("guid") + "/" } } $xmlNodeOption && (strUrl += "?lotid=" + strStripNonNumeric($xmlNodeOption.attr("id"))), strImgPath = strImgPath || self.pathDefaultThumbnailImg; var isExternalLink = !1; $dataInfo.attr("enablebuilderplanurls") && "1" == $dataInfo.attr("enablebuilderplanurls") && $xmlNodePlan.attr("builderplanurl") && $xmlNodePlan.attr("builderplanurl").length > 0 && (strUrl = $xmlNodePlan.attr("builderplanurl"), isExternalLink = !0), isKiosk() ? (strUrl = isExternalLink ? "uiKioskPostMessage({ event: 'linkPlanClicked', data: '" + strUrl + "' });" : "uiKioskPostMessage({ event: 'linkPlanClicked', data: '" + location.protocol + "//" + location.host + strUrl + "' });", $linkPlan = $('<a href="#" />').attr("onclick", strUrl)) : $linkPlan = $("<a />").attr("href", strUrl).attr("target", "_blank").attr("title", strLinkTitle); var $imgThumb = $("<img />").attr("src", strImgPath).addClass("ui-sitetip-thumb-img"); "Right" != selectedOrientation && "right" != selectedOrientation && "Flipped" != selectedOrientation && "flipped" != selectedOrientation || $imgThumb.addClass("ui-flipped-h"), $divWrapper.append($linkPlan.clone(!1, !1).append($imgThumb)); var $spanName = $("<span />").text(strName).addClass("ui-sitetip-head").addClass("ui-sitetip-thumb-title"); $divWrapper.append($linkPlan.clone(!1, !1).append($spanName)) } return $divWrapper } self.featuredStatus = undefined, self.featuredLots = undefined, self.pathDefaultThumbnailImg = "/assets/images/common-no-preview.svgz", self.isMousedOverOption = !1, self.isSticky = !1, self.currentlyEditingOptionID = undefined, self.setup = function () { self.dialogEditSetup(), self.oFnOv_setup.callBase(arguments) }, self.oFnOv_setup = undefined, self.setupAfterData = function () { var qsOverride = $.deparam.querystring(); if (self.featuredStatus = qsOverride.fstatus, qsOverride.fbstatus) { var $legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[buildercodes=" + qsOverride.fbstatus + "]"); self.featuredStatus = strStripNonNumeric($legenditemNode.attr("id")) } if (self.featuredLots = qsOverride.flots, self.featuredStatus > 0) { self.featuredLots = undefined !== self.featuredLots ? self.featuredLots.split(",") : Array(); var featuredLotsBuilderNames = qsOverride.fblots; undefined !== featuredLotsBuilderNames && (featuredLotsBuilderNames = featuredLotsBuilderNames.split(",")).forEach((function (lotBuilderName) { var lotId = $dataOptions.find('option[buildername="' + lotBuilderName + '"]').attr("data1"); lotId && (lotId = lotId.substring(lotId.lastIndexOf(".") + 1), self.featuredLots.push(lotId)) })), $dataOptions.find("option[legenditemid]").attr("legenditemid", ""), self.featuredLots.forEach((function (lotId) { $dataOptions.find('option[data1$=".' + lotId + '"]').attr("legenditemid", "lgi-" + self.featuredStatus) })) } self.oFnOv_setupAfterData.callBase(arguments) }, self.oFnOv_setupAfterData = undefined, self.setupShow = function (floorIndex) { _currentViewID = $($dataViews.find("view")[floorIndex]).attr("id"); var $optXMLNode, optID, viewID = $($dataViews.find("view")[floorIndex]).attr("id"), viewDBID = strStripNonNumeric(viewID); optionsSetupInitiallySelected = [], $dataOptions.find('group[viewid="' + viewDBID + '"]').each((function () { $(this).find("option").each((function () { $optXMLNode = $(this), optID = $optXMLNode.attr("id"), optionsUpdateUI(optID) })) })), self.dialogEditSetupAfterOptionsShow() }, self.oFnOv_setupShow = undefined, self.svgItemGetOptionNode = function ($svgOptionEl) { return $dataOptions.find("option[data1=" + strEscapeDots($svgOptionEl.attr("id")) + "]") }, self.svgElSetupColor = function ($svgOptionEl) { var legendColor, $optionNode = self.svgItemGetOptionNode($svgOptionEl), $legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[id=" + $optionNode.attr("legenditemid") + "]"); $legenditemNode.length > 0 ? (legendColor = $legenditemNode.attr("color1")) && svgHighlight($svgOptionEl, OPTION_COLOR, legendColor) : self.featuredStatus > 0 && svgHighlight($svgOptionEl, OPTION_COLOR, OPTION_COLOR_NOTFEATURED); var icon = $legenditemNode.attr("icon"); if ($svgPlanData.find("g[id=" + strEscapeDots(icon) + "]").length > 0) { var svgID = $optionNode.attr("data1"), $container = $svgOptionEl.parent(), $gPlot = $container.find("g[id=" + strEscapeDots(svgID) + "]"); self.svgElSetupIcon($gPlot, icon), $container.find("g[id=" + strEscapeDots(icon) + "]").hide() } }, self.oFnOv_svgElSetupColor = undefined, self.svgElSetupIcon = function ($gOptionEl, svgIconId) { var $container = $gOptionEl.parent(), $txtNode = $gOptionEl.find("g"), txtBounds = svgGetBounds($txtNode), txtCenterX = txtBounds.bbox_x + txtBounds.bbox_width / 2, txtCenterY = txtBounds.bbox_y + txtBounds.bbox_height / 2, $gIcon = $svgPlanData.find("g[id=" + strEscapeDots(svgIconId) + "]"), $gIconCopy = $gIcon.clone(!1, !1); $gIcon.hide(); var iconId = $gOptionEl.attr("id") + "." + svgIconId; $gIconCopy.attr("id", iconId); var $icon = $gIconCopy.appendTo($container); $icon.css("display", "block"), $icon.show(); var $iconBounds = svgGetBounds($icon); txtCenterX -= $iconBounds.width / 2, txtCenterY -= $iconBounds.height / 2, $gOptionEl.attr("id") in $iconX ? (txtCenterX = $iconX[$gOptionEl.attr("id")], txtCenterY = $iconY[$gOptionEl.attr("id")]) : ($iconX[$gOptionEl.attr("id")] = txtCenterX, $iconY[$gOptionEl.attr("id")] = txtCenterY); var iconMx = xfrmSVGGet($icon); iconMx = xfrmMatrixMoveAbsolute(iconMx, txtCenterX, txtCenterY), xfrmSVGSet($icon, iconMx), $txtNode.hide() }, self.oFnOv_svgElSetupIcon = undefined, self.svgElOnMouseEnter = function (e) { if (this && !self.isSticky) { self.isMousedOverOption = !0; var $svgOptionEl = $(this); if (self.featuredStatus > 0 && undefined !== self.featuredLots && self.featuredLots.constructor === Array) { var lotNum = $svgOptionEl.attr("id").substring($svgOptionEl.attr("id").lastIndexOf(".") + 1); if (!self.featuredLots.includes(lotNum)) return } $svgOptionEl.css("cursor", "pointer"), $svgOptionEl.find("[fill]").css("opacity", "0.6") } }, self.oFnOv_svgElOnMouseEnter = undefined, self.svgElOnMouseLeave = function (e) { this && ($(this).find("[fill]").css("opacity", "1"), self.isSticky || (self.isMousedOverOption = !1, $(this).find("[fill]").css("opacity", "1"), -1 === $(this).attr("id").indexOf(".poi.") && setTimeout(self.tooltipHide, 50))) }, self.oFnOv_svgElOnMouseLeave = undefined, self.svgElOnMouseMove = function (e) { if (this && !self.isSticky) { self.isMousedOverOption = !0; var optionID = self.svgItemGetOptionNode($(this)).attr("id"); return -1 === $(this).attr("id").indexOf(".poi.") && self.tooltipShow(optionID, e.pageX, e.pageY), killEvent(e) } }, self.oFnOv_svgElOnMouseMove = undefined, self.svgElOnMouseDown = function (e) { if (this) { var $svgOptionEl = $(this), optionID = self.svgItemGetOptionNode($svgOptionEl).attr("id"); if (self.featuredStatus > 0 && undefined !== self.featuredLots && self.featuredLots.constructor === Array) { var lotNum = $svgOptionEl.attr("id").substring($svgOptionEl.attr("id").lastIndexOf(".") + 1); if (!self.featuredLots.includes(lotNum)) return } if (-1 !== $(this).attr("id").indexOf(".poi.")) optionsPoiShow($svgOptionEl.attr("id")); else { self.isSticky = !0, self.tooltipShow(optionID, e.pageX, e.pageY); var $blocker = uiBlockMainUI(!0, !0); $blocker.on("vmousedown tap", (function () { return uiBlockMainUI(!1, undefined), self.tooltipHide(!0), killEvent(e) })), ($blocker = uiBlockStage(!0, !0)).on("vmousedown tap", (function () { return uiBlockMainUI(!1, undefined), self.tooltipHide(!0), killEvent(e) })) } return killEvent(e) } }, self.oFnOv_svgElOnMouseDown = undefined, self.flagged_visible = function ($flag) { return !("Enabled Everywhere" != $flag && ("Contrado Admins Only" != $flag || !window.$dataCurrentUser || "admin" !== window.$dataCurrentUser.UserTypeCode && "superadmin" !== window.$dataCurrentUser.UserTypeCode && "manager" !== window.$dataCurrentUser.UserTypeCode) && ("Client Users Only" != $flag || !window.$dataCurrentUser || "client" !== window.$dataCurrentUser.UserTypeCode && "clientadmin" !== window.$dataCurrentUser.UserTypeCode && "admin" !== window.$dataCurrentUser.UserTypeCode && "superadmin" !== window.$dataCurrentUser.UserTypeCode && "manager" !== window.$dataCurrentUser.UserTypeCode)) }, self.tooltipShow = function (optionID, pxPageX, pxPageY) { dbg("Site.Options.Main.tooltipShow(optionID, pxPageX, pxPageY) " + optionID + ", " + pxPageX + ", " + pxPageY); var $nodeOption = $dataOptions.find("option[id=" + optionID + "]"); if (optionID === _currentOptionID) VIP.UI.Main.stageToolTip.updatePosition(pxPageX, pxPageY, !0); else { if (self.featuredStatus > 0 && undefined !== self.featuredLots && self.featuredLots.constructor === Array) { var lotNum = $nodeOption.attr("data1").substring($nodeOption.attr("data1").lastIndexOf(".") + 1); if (!self.featuredLots.includes(lotNum)) return void VIP.UI.Main.stageToolTip.hide() } var strTmp, $domTmp, $divSitetipTitle = $("<div />"), $divSitetip = $("<div />").addClass("ui-sitetip-body"), $nodeLegendItem = Site.Data.Main.$dataLegends.find("legenditem[id=" + $nodeOption.attr("legenditemid") + "]"); if ((strTmp = $nodeOption.attr("displayname")) || (strTmp = "&nbsp;"), $domTmp = $("<span />").html(strTmp).addClass("ui-sitetip-title").appendTo($divSitetipTitle), !window.$dataCurrentUser || "client" !== window.$dataCurrentUser.UserTypeCode && "clientadmin" !== window.$dataCurrentUser.UserTypeCode && "admin" !== window.$dataCurrentUser.UserTypeCode && "superadmin" !== window.$dataCurrentUser.UserTypeCode && "manager" !== window.$dataCurrentUser.UserTypeCode || ($domTmp = $("<div />").addClass("ui-sitetip-btns"), $('<a href="#" />').text("Edit").attr("onclick", 'window.Site.Options.Main.dialogEditShow("' + optionID + '");').appendTo($domTmp), $domTmp.appendTo($divSitetipTitle)), self.flagged_visible($dataInfo.attr("subheadingvisibility")) && (strTmp = $nodeOption.attr("title1")) && ($domTmp = $("<span />").html(strTmp).addClass("ui-sitetip-head").appendTo($divSitetip)), self.flagged_visible($dataInfo.attr("lotstatusvisibility")) && (strTmp = $nodeLegendItem.attr("displayname")) && $nodeLegendItem.length) { var colorLegendItem = $nodeLegendItem.attr("color2"); $domTmp = $("<span />").text(strTmp).addClass("ui-sitetip-head").addClass("ui-sitetip-status"), colorLegendItem && $domTmp.css("color", $nodeLegendItem.attr("color2")), $domTmp.appendTo($divSitetip) } var $divPoi, $svgPoi, $nodePlan = Site.Data.Main.$dataAvailablePlans.find("plan[id=" + $nodeOption.attr("selectedplanid") + "]"); if ($nodePlan.length) self.flagged_visible($dataInfo.attr("selectedplanvisibility")) && $divSitetip.append(_getPlanThumbElementForTooltip($nodeOption, $nodePlan, !1)); else if ("None" !== $nodeLegendItem.attr("selectableplans") && self.flagged_visible($dataInfo.attr("availableplansvisibility"))) { var strAvailablePlanIds = $nodeOption.attr("availableplans"), arrAvailableIds = strAvailablePlanIds ? strAvailablePlanIds.split(",") : undefined, $nodesAvailable = $(); undefined !== arrAvailableIds ? arrAvailableIds.forEach((function (strId) { $nodesAvailable = $nodesAvailable.add(Site.Data.Main.$dataAvailablePlans.find('plan[id="' + strEscapeDots(strId) + '"]')) })) : $nodesAvailable = Site.Data.Main.$dataAvailablePlans.find("plan"); var iAvailableCount = $nodesAvailable.length; if ($domTmp = $("<div />").addClass("ui-sitetip-thumbgrid"), !(isSmallScreen() && iAvailableCount > 1) && iAvailableCount <= 9) 1 === iAvailableCount ? $domTmp.addClass("ui-sitetip-thumbgrid-1c") : iAvailableCount <= 4 ? $domTmp.addClass("ui-sitetip-thumbgrid-2c") : $domTmp.addClass("ui-sitetip-thumbgrid-3c"), $nodesAvailable.each((function () { $domTmp.append(_getPlanThumbElementForTooltip($nodeOption, $(this), !0)) })); else { _$divDialogOptionsAvailablePlans = $("<div />").addClass("ui-sitetip-thumbgrid"), $nodesAvailable.each((function () { _$divDialogOptionsAvailablePlans.append(_getPlanThumbElementForTooltip($nodeOption, $(this), !0)) })), (_$divDialogOptionsAvailablePlans = $("<div />").attr("id", "divDialogOptionsAvailablePlans").append(_$divDialogOptionsAvailablePlans)).addClass("ui-scroll-container").addClass("ui-content"), (strTmp = $nodeOption.attr("displayname")) || (strTmp = ""), $("<h2>" + strTmp + " (" + iAvailableCount + " plans available)</h2>").prependTo(_$divDialogOptionsAvailablePlans), $domTmp.addClass("ui-sitetip-thumbgrid-more"); var $linkPlan = $('<a href="#" />').attr("onclick", "window.Site.Options.Main.dialogAvailablePlansShow();"); $("<img />").attr("src", "/assets/images/site-more-plans-available.png").appendTo($linkPlan), $("<span />").html(" <span>" + iAvailableCount + "</span> <span>plans available</span> <span>click here</span> <span>&rsaquo;</span>").addClass("ui-sitetip-head").appendTo($linkPlan), $linkPlan.appendTo($domTmp) } $domTmp.appendTo($divSitetip) } if ($domTmp = $("<div />").addClass("ui-sitetip-pois"), $dataOptions.find("option[parentoption=" + strEscapeDots($nodeOption.attr("data1")) + "]").each((function () { $svgPoi = $("#divPoiIcons").find("svg").clone(!1, !1).empty().attr("id", "svgSiteTipPoi_" + $(this).attr("id")).attr("width", "25px").attr("height", "25px"), $("#divPoiIcons").find("g[id=" + strEscapeDots($(this).attr("data2")) + "]").clone(!1, !1).appendTo($svgPoi), ($divPoi = $("<div />").attr("id", "divSiteTipPoi_" + $(this).attr("id")).append($svgPoi)).attr("onclick", 'optionsPoiShow("' + $(this).attr("id") + '");'), $divPoi.appendTo($domTmp) })), $domTmp.children().length && $domTmp.appendTo($divSitetip), self.flagged_visible($dataInfo.attr("selectedexteriorvisibility"))) { var $nodeExterior = Site.Data.Main.$dataAvailableExteriors.find("exterior[optionid=" + $nodeOption.attr("selectedexterioroptionid") + "]"); $nodePlan.length && $nodeExterior.length && (strTmp = $nodeExterior.attr("displayname")) && ($domTmp = $("<span />").text(strTmp).addClass("ui-sitetip-head").addClass("ui-sitetip-exterior")).appendTo($divSitetip) } self.flagged_visible($dataInfo.attr("lotpremiumvisibility")) && (strTmp = parseFloat($nodeOption.attr("lotpremium"))) > 0 && (strTmp = strTmp.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0 }), ($domTmp = $("<span />").text("Lot Premium:").addClass("ui-sitetip-label").addClass("ui-sitetip-premium")).appendTo($divSitetip), ($domTmp = $("<span />").text(strTmp).addClass("ui-sitetip-value").addClass("ui-sitetip-premium")).appendTo($divSitetip)), self.flagged_visible($dataInfo.attr("infotextvisibility")) && (strTmp = $nodeOption.attr("text1")) && ($domTmp = $("<div />").html(strTmp).addClass("ui-sitetip-value").addClass("ui-sitetip-info").appendTo($divSitetip)), $divSitetip.text() || $divSitetipTitle.text() ? (_currentOptionID = optionID, VIP.UI.Main.stageToolTip.setup(pxPageX, pxPageY, !0, $divSitetip[0].outerHTML, $divSitetipTitle[0].outerHTML)) : VIP.UI.Main.stageToolTip.hide() } }, self.tooltipHide = function (bForce) { self.isSticky = !1, _currentOptionID = undefined; var $blocker = uiBlockMainUI(!1, undefined); $blocker.off(), ($blocker = uiBlockStage(!1, undefined)).off(), self.isMousedOverOption && !bForce || VIP.UI.Main.stageToolTip.hide() }, self.dialogAvailablePlansShow = function () { optionsPoiShow_HTML(_$divDialogOptionsAvailablePlans[0].outerHTML) }, self.dialogEditSetup = function () { (_$dialogEditEl = $("#modSiteOptions_layoutDialogOptionEdit")).find(".btnCancel").on("tap vmousedown", (function () { self.dialogEditOnClose(!1) })), _$dialogEditEl.find(".btnOk").on("tap vmousedown", (function () { self.dialogEditOnClose(!0) })) }, self.dialogEditSetupAfterOptionsShow = function () { var $legenditemNode, $planNode, $viewNode = $dataViews.find("view[id=" + _currentViewID + "]"), $legendNode = Site.Data.Main.$dataLegends.find("legend[id=" + $viewNode.attr("legendid") + "]"), $dropdownEl = _$dialogEditEl.find("#modSiteOptions_selStatus"); $dropdownEl.empty(), $legendNode.find("legenditem").each((function () { $legenditemNode = $(this), $('<option value="' + $legenditemNode.attr("id") + '">' + $legenditemNode.attr("displayname") + "</option>").appendTo($dropdownEl) })), $dropdownEl.selectmenu(), $dropdownEl.on("change", window.Site.Options.Main.dialogEditOnStatusChange); var $availablePlansNode = Site.Data.Main.$dataAvailablePlans; ($dropdownEl = _$dialogEditEl.find("#modSiteOptions_selSelectedPlan")).empty(), $availablePlansNode.find("plan").each((function () { $planNode = $(this), $('<option value="' + $planNode.attr("id") + '">' + $planNode.attr("displayname") + "</option>").appendTo($dropdownEl) })), $dropdownEl.selectmenu(), $dropdownEl.on("change", window.Site.Options.Main.dialogEditOnSelectedPlanChange), ($dropdownEl = _$dialogEditEl.find("#modSiteOptions_selSavedPlan")).empty(), $dropdownEl.selectmenu(), $dropdownEl.on("change", window.Site.Options.Main.dialogEditOnSavedPlanChange), ($dropdownEl = _$dialogEditEl.find("#modSiteOptions_selSelectedElevation")).empty(), $dropdownEl.selectmenu() }, self.dialogEditPopulateAvailableSavedPlans = function (optionID, planID) { var $dropdownEl = _$dialogEditEl.find("#modSiteOptions_selSavedPlan"); $dropdownEl.empty(); var $availablePlans = Site.Data.Main.$dataAvailablePlans; $('<option value="">(None)</option>').appendTo($dropdownEl), $availablePlans.find("plan[id=" + planID + "] savedplan").each((function () { var createdatetime = new Date($(this).attr("createdate")); createdatetime = createdatetime.toLocaleString("en-US", { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", hour12: !0 }), $('<option value="' + $(this).attr("id") + '">' + createdatetime + " - " + $(this).attr("name") + "</option>").appendTo($dropdownEl) })), $dropdownEl.selectmenu("refresh") }, self.dialogEditPopulateAvailableExteriors = function (optionID, planID) { var $dropdownEl = _$dialogEditEl.find("#modSiteOptions_selSelectedElevation"); $dropdownEl.empty(); var $availableExteriorsNodes = Site.Data.Main.$dataAvailableExteriors; $('<option value="">(None)</option>').appendTo($dropdownEl), $availableExteriorsNodes.find("exterior[planid=" + planID + "]").each((function () { $('<option value="' + $(this).attr("optionid") + '">' + $(this).attr("displayname") + "</option>").appendTo($dropdownEl) })), $dropdownEl.selectmenu("enable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedElevation]").removeClass("ui-disabled") }, self.dialogEditOnStatusChange = function () { _$dialogEditEl.find("#modSiteOptions_selStatus").selectmenu("refresh"); var legenditemID = _$dialogEditEl.find("#modSiteOptions_selStatus").val(), $legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[id=" + legenditemID + "]"); if ($dataCustomFields.find("customfield").length > 0); else if (1 == $legenditemNode.attr("enableplanselections")) { _$dialogEditEl.find("#modSiteOptions_PlanSelections").show(); var optionSelectedPlan = _$dialogEditEl.find("#modSiteOptions_selSelectedPlan").val(); self.dialogEditPopulateAvailableSavedPlans(self.currentlyEditingOptionID, optionSelectedPlan), self.dialogEditPopulateAvailableExteriors(self.currentlyEditingOptionID, optionSelectedPlan), _$dialogEditEl.find("#modSiteOptions_selSelectedOrientation").val("").change().selectmenu("enable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedOrientation]").removeClass("ui-disabled") } else _$dialogEditEl.find("#modSiteOptions_PlanSelections").hide() }, self.dialogEditOnSelectedPlanChange = function () { var optionSelectedPlan = _$dialogEditEl.find("#modSiteOptions_selSelectedPlan").val(); self.dialogEditPopulateAvailableSavedPlans(self.currentlyEditingOptionID, optionSelectedPlan), self.dialogEditPopulateAvailableExteriors(self.currentlyEditingOptionID, optionSelectedPlan), _$dialogEditEl.find("#modSiteOptions_selSelectedOrientation").val("").change().selectmenu("enable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedOrientation]").removeClass("ui-disabled") }, self.dialogEditOnSavedPlanChange = function () { var savedPlanId = _$dialogEditEl.find("#modSiteOptions_selSavedPlan").val(), $savedPlanNode = Site.Data.Main.$dataAvailablePlans.find("plan savedplan[id=" + savedPlanId + "]"), orientation = $savedPlanNode.attr("flippedh") > 0 ? "Right" : "Left"; savedPlanId > 0 ? (_$dialogEditEl.find("#modSiteOptions_selSelectedElevation").val($savedPlanNode.attr("exteriorid")).change().selectmenu("disable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedElevation]").addClass("ui-disabled"), _$dialogEditEl.find("#modSiteOptions_selSelectedOrientation").val(orientation).change().selectmenu("disable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedOrientation]").addClass("ui-disabled")) : (_$dialogEditEl.find("#modSiteOptions_selSelectedElevation").val("").change().selectmenu("enable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedElevation]").removeClass("ui-disabled"), _$dialogEditEl.find("#modSiteOptions_selSelectedOrientation").val("").change().selectmenu("enable").selectmenu("refresh"), _$dialogEditEl.find("label[for=modSiteOptions_selSelectedOrientation]").removeClass("ui-disabled")) }, self.dialogEditShow = function (optionID) { _$dialogEditEl.find("#modSiteOptions_hiddenOptionID").val(optionID); var $optionNode = $dataOptions.find("option[id=" + optionID + "]"), $legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[id=" + $optionNode.attr("legenditemid") + "]"); self.currentlyEditingOptionID = optionID, _currentOptionSvgElColor = $legenditemNode.attr("color1"); var $customfields = $dataCustomFields.find("customfield"); if ($customfields.length > 0) for (var $i = 0; $i < $customfields.length; $i++) { var $def = $customfields[$i], $inputname = $($def).attr("inputname"), $datatype = $($def).attr("datatype"), $val = $optionNode.attr($inputname) || ""; "Standard Title" == $datatype && ($val = $optionNode.attr("displayname") || ""), 1 == $legenditemNode.attr("enableplanselections") && ("Standard Selected Plan" == $datatype && ($val = $optionNode.attr("selectedplanid") || ""), "Standard Selected Elevation" == $datatype && ($val = $optionNode.attr("selectedexterioroptoinid") || ""), "Standard Selected Orientation" == $datatype && ($val = $optionNode.attr("selectedorientation") || "")), "Standard Subheading" == $datatype && ($val = $optionNode.attr("title1") || ""), "Standard Status" == $datatype && $legenditemNode.length > 0 && ($val = $legenditemNode.attr("id").replace("lgi-", "")), "Standard Lot Info" == $datatype && ($val = $optionNode.attr("text1")), "Image" != $datatype && _$dialogEditEl.find("#modSiteOptions_" + $inputname).val($val).change() } else { var optionDisplayName = $optionNode.attr("displayname"); optionDisplayName = optionDisplayName || "", _$dialogEditEl.find("#modSiteOptions_txtDialogTitle").text("Edit " + optionDisplayName); var optionTitle1 = $optionNode.attr("title1"); optionTitle1 = optionTitle1 || "", _$dialogEditEl.find("#modSiteOptions_txtTitle1").val(optionTitle1); var optionText1 = $optionNode.attr("text1"); optionText1 = optionText1 || "", _$dialogEditEl.find("#modSiteOptions_txtNote").val(optionText1); var publicprivatenotes = $optionNode.attr("publicnotes"); if (!window.$dataCurrentUser || "client" !== window.$dataCurrentUser.UserTypeCode && "clientadmin" !== window.$dataCurrentUser.UserTypeCode && "admin" !== window.$dataCurrentUser.UserTypeCode && "superadmin" !== window.$dataCurrentUser.UserTypeCode && "manager" !== window.$dataCurrentUser.UserTypeCode || (publicprivatenotes += "\n" + $optionNode.attr("privatenotes")), publicprivatenotes = publicprivatenotes || "", _$dialogEditEl.find("#modSiteOptions_txtPublicPrivateNotes").val(publicprivatenotes), _$dialogEditEl.find("#modSiteOptions_selStatus").val($legenditemNode.attr("id")).change().selectmenu("refresh"), 1 == $legenditemNode.attr("enableplanselections")) { _$dialogEditEl.find("#modSiteOptions_PlanSelections").show(); var optionSelectedPlan = $optionNode.attr("selectedplanid"); optionSelectedPlan = optionSelectedPlan || _$dialogEditEl.find("#modSiteOptions_selSelectedPlan option").first().val(), _$dialogEditEl.find("#modSiteOptions_selSelectedPlan").val(optionSelectedPlan).change().selectmenu("refresh"); var optionSavedPlanId = $optionNode.attr("savedplanid"); optionSavedPlanId = optionSavedPlanId || "", _$dialogEditEl.find("#modSiteOptions_selSavedPlan").val(optionSavedPlanId).change().selectmenu("refresh"); var optionSelectedExterior = $optionNode.attr("selectedexterioroptionid"); optionSelectedExterior && _$dialogEditEl.find("#modSiteOptions_selSelectedElevation").val(optionSelectedExterior).change().selectmenu("refresh"); var optionSelectedOrientation = $optionNode.attr("selectedorientation"); optionSelectedOrientation && _$dialogEditEl.find("#modSiteOptions_selSelectedOrientation").val(optionSelectedOrientation).change().selectmenu("refresh") } else _$dialogEditEl.find("#modSiteOptions_PlanSelections").hide() } _$dialogEditEl.popup("open") }, self.dialogEditOnClose = function (bSave) { if (bSave) { self.tooltipHide(!0); var $customfields = $dataCustomFields.find("customfield"), $optionNode = $dataOptions.find("option[id=" + self.currentlyEditingOptionID + "]"), legenditemID = _$dialogEditEl.find("#modSiteOptions_selStatus").val(); if ($customfields.length > 0) { legenditemID = "lgi-" + _$dialogEditEl.find("#modSiteOptions_selStatus").val(); for (var $legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[id=" + legenditemID + "]"), $i = 0; $i < $customfields.length; $i++) { var $def = $customfields[$i], $inputname = $($def).attr("inputname"), $datatype = $($def).attr("datatype"), $val = _$dialogEditEl.find("#modSiteOptions_" + $inputname).val() || ""; "Standard Title" == $datatype ? $optionNode.attr("displayname", $val) : "Standard Subheading" == $datatype ? $optionNode.attr("title1", $val) : "Standard Status" == $datatype ? $optionNode.attr("legenditemid", $val) : "Standard Lot Info" == $datatype ? $optionNode.attr("text1", $val) : -1 == $datatype.indexOf("Standard ") && $optionNode.attr($inputname, $val), 1 == $legenditemNode.attr("enableplanselections") ? ("Standard Selected Plan" == $datatype && $optionNode.attr("selectedplanid", $val), "Standard Selected Elevation" == $datatype && $optionNode.attr("selectedexterioroptoinid", $val), "Standard Selected Orientation" == $datatype && $optionNode.attr("selectedorientation", $val)) : ("Standard Selected Plan" == $datatype && $optionNode.attr("selectedplanid", ""), "Standard Selected Elevation" == $datatype && $optionNode.attr("selectedexterioroptoinid", ""), "Standard Selected Orientation" == $datatype && $optionNode.attr("selectedorientation", "")) } } else { $optionNode.attr("title1", _$dialogEditEl.find("#modSiteOptions_txtTitle1").val()), $optionNode.attr("legenditemid", legenditemID), $optionNode.attr("text1", _$dialogEditEl.find("#modSiteOptions_txtNote").val()), 1 == ($legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[id=" + legenditemID + "]")).attr("enableplanselections") ? ($optionNode.attr("selectedplanid", _$dialogEditEl.find("#modSiteOptions_selSelectedPlan").val()), $optionNode.attr("savedplanid", _$dialogEditEl.find("#modSiteOptions_selSavedPlan").val()), $optionNode.attr("selectedexterioroptionid", _$dialogEditEl.find("#modSiteOptions_selSelectedElevation").val()), $optionNode.attr("selectedorientation", _$dialogEditEl.find("#modSiteOptions_selSelectedOrientation").val())) : ($optionNode.attr("selectedplanid", ""), $optionNode.attr("savedplanid", ""), $optionNode.attr("selectedexterioroptionid", ""), $optionNode.attr("selectedorientation", "")) } var $svgOptionEl = $("#gPlan").find("#" + strEscapeDots($optionNode.attr("data1"))), legendColor = ($legenditemNode = Site.Data.Main.$dataLegends.find("legenditem[id=" + legenditemID + "]")).attr("color1"); if (legendColor) { svgHighlight($svgOptionEl, _currentOptionSvgElColor, legendColor); var displayname = $legenditemNode.attr("displayname"), icon_present = $svgPlanData.find("g[id=" + strEscapeDots("icon.sold") + "]").length > 0; if (displayname && displayname.toLowerCase().indexOf("sold") >= 0 && icon_present) { var svgID = $optionNode.attr("data1"), $gPlot = $svgOptionEl.parent().find("g[id=" + strEscapeDots(svgID) + "]"); self.svgElSetupIcon($gPlot, "icon.sold") } else { $svgOptionEl.find("g").show(); $svgOptionEl = $("#gPlan").find("#" + strEscapeDots($optionNode.attr("data1") + ".icon.sold")).hide() } } Site.Data.Main.recordSaveSingleOption(self.currentlyEditingOptionID) } }; return self.oFnOv_setup = new VIP.Util.FnOverride("optionsSetup", self.setup), self.oFnOv_setupAfterData = new VIP.Util.FnOverride("optionsSetupAfterData", self.setupAfterData), self.oFnOv_setupShow = new VIP.Util.FnOverride("optionsShow", self.setupShow), self.oFnOv_svgElSetupColor = new VIP.Util.FnOverride("svgPlanOptionSetupColor", self.svgElSetupColor), self.oFnOv_svgElOnMouseEnter = new VIP.Util.FnOverride("VIP.Options.Main.svgElOnMouseEnter", self.svgElOnMouseEnter), self.oFnOv_svgElOnMouseLeave = new VIP.Util.FnOverride("VIP.Options.Main.svgElOnMouseLeave", self.svgElOnMouseLeave), self.oFnOv_svgElOnMouseMove = new VIP.Util.FnOverride("VIP.Options.Main.svgElOnMouseMove", self.svgElOnMouseMove), self.oFnOv_svgElOnMouseDown = new VIP.Util.FnOverride("VIP.Options.Main.svgElOnMouseDown", self.svgElOnMouseDown), self }(jQuery); var $iconX = new Array, $iconY = new Array;